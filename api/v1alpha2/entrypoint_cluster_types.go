/*
Copyright 2024 Emil Larsson.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha2

import (
	egv1alpha1 "github.com/envoyproxy/gateway/api/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gwapiv1 "sigs.k8s.io/gateway-api/apis/v1"
)

// ClusterEntryPointSpec defines the desired state of ClusterEntryPoint
type ClusterEntryPointSpec struct {
	// Type is the way the Kode resource is accessed. It could be subdomain or path.
	// +kubebuilder:validation:description=Type is the way the Kode resource is accessed. It could be subdomain or path.
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Enum=domain;path
	RoutingType string `json:"routingType,omitempty" yaml:"routingType,omitempty"`

	// URL is the domain name to use either as a suffix in the case of Type=domain or as a prefix/domain in the case of Type=path.
	// When the type is domain, the controller will try to publish the Kode resource as a subdomain of the given domain (e.g <kode-resource>.kode.example.com).
	// When the type is path, the controller will try to publish the Kode resource as a path of the given URL (e.g kode.example.com/<kode-resource>).
	// +kubebuilder:validation:description=URL is the domain name to use either as a suffix in the case of Type=domain or as a prefix/domain in the case of Type=path. When the type is domain, the controller will try to publish the Kode resource as a subdomain of the given domain (e.g <kode-resource>.kode.example.com). When the type is path, the controller will try to publish the Kode resource as a path of the given URL (e.g kode.example.com/<kode-resource>).
	// +kubebuilder:validation:Optional
	URL string `json:"url,omitempty" yaml:"url,omitempty"`

	// GatewaySpec defines the GatewaySpec for the EntryPoint. Only one of GatewaySpec or IngressSpec can be set.
	// +kubebuilder:validation:description=GatewaySpec defines the GatewaySpec for the EntryPoint. Only one of GatewaySpec or IngressSpec can be set.
	// +kubebuilder:validation:Optional
	GatewaySpec *GatewaySpec `json:"gatewaySpec,omitempty" yaml:"gatewaySpec,omitempty"`
}

type GatewaySpec struct {
	// GatewayClassName is the name of the GatewayClass to use for the Gateway.
	// +kubebuilder:validation:description=GatewayClassName is the name of the GatewayClass to use for the Gateway.
	// +kubebuilder:validation:Optional
	GatewayClassName gwapiv1.ObjectName `json:"gatewayClassName,omitempty" yaml:"gatewayClassName,omitempty"`

	// PatchPolicy defines the custom patch policy for the Envoy Proxy config generated by Envoy Gateway. For experienced users.
	// +kubebuilder:validation:description=PatchPolicy defines the custom patch policy for the Envoy Proxy config generated by Envoy Gateway. For experienced users.
	// +kubebuilder:validation:Optional
	EnvoyPatchPolicySpec *egv1alpha1.EnvoyPatchPolicySpec `json:"envoyPatchPolicySpec,omitempty" yaml:"envoyPatchPolicySpec,omitempty"`
	
	// SecurityPolicies is a list of SecurityPolicies to apply to the Gateway.
	// +kubebuilder:validation:description=SecurityPolicies is a list of SecurityPolicies to apply to the Gateway.
	// +kubebuilder:validation:Optional
	SecurityPolicies []egv1alpha1.SecurityPolicy `json:"securityPolicies,omitempty" yaml:"securityPolicies,omitempty"`
}

// EntryPointPhase defines the phase of the EntryPoint
type EntryPointPhase string

const (
	// EntryPointPhaseCreating means the EntryPoint is being created.
	EntryPointPhaseCreating EntryPointPhase = "Creating"

	// KodePhaseCreated indicates that the Kode resource has been created.
	EntryPointPhaseCreated EntryPointPhase = "Created"

	// EntryPointPhaseFailed means the EntryPoint has failed.
	EntryPointPhaseFailed EntryPointPhase = "Failed"

	// EntryPointPhasePending means the EntryPoint is pending.
	EntryPointPhasePending EntryPointPhase = "Pending"

	// EntryPointPhaseActive means the EntryPoint is active.
	EntryPointPhaseActive EntryPointPhase = "Active"
)


// ClusterEntryPointStatus defines the observed state of ClusterEntryPoint
type ClusterEntryPointStatus struct {
	BaseSharedStatus `json:",inline" yaml:",inline"`

	// Phase represents the current phase of the EntryPointPhase resource.
	Phase EntryPointPhase `json:"phase" yaml:"phase"`

	// LastError contains the last error message encountered during reconciliation.
	LastError string `json:"lastError,omitempty" yaml:"lastError,omitempty"`

	// LastErrorTime is the timestamp when the last error occurred.
	LastErrorTime *metav1.Time `json:"lastErrorTime,omitempty" yaml:"lastErrorTime,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster

// ClusterEntryPoint is the Schema for the clusterentrypoints API
type ClusterEntryPoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ClusterEntryPointSpec   `json:"spec,omitempty"`
	Status ClusterEntryPointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterEntryPointList contains a list of ClusterEntryPoint
type ClusterEntryPointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterEntryPoint `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ClusterEntryPoint{}, &ClusterEntryPointList{})
}
