version: '3'

includes:
  build: 
    taskfile: build.yaml
    internal: true

vars:
  KUSTOMIZE_CMD: '{{.LOCALBIN}}/kustomize-{{.KUSTOMIZE_VERSION}}'
  CONTROLLER_GEN_CMD: '{{.LOCALBIN}}/controller-gen-{{.CONTROLLER_TOOLS_VERSION}}'
  SETUP_ENVTEST_CMD: '{{.LOCALBIN}}/setup-envtest-{{.ENVTEST_VERSION}}'
  GOLANGCI_LINT_CMD: '{{.LOCALBIN}}/golangci-lint-{{.GOLANGCI_LINT_VERSION}}'
  HELMIFY_CMD: '{{.LOCALBIN}}/helmify-{{.HELMIFY_VERSION}}'
  KIND_CONTROL_PLANE: "{{.KIND_CLUSTER_NAME}}-control-plane"

tasks:
  set-context:
    internal: true
    cmds:
      - |
        if [ "{{.USE_KIND_CONTEXT}}" = "true" ]; then
          echo "Checking Kind context..."
          if kubectl config get-contexts {{.KIND_CONTEXT}} &>/dev/null; then
            echo "Using Kind context..."
            kubectl config use-context {{.KIND_CONTEXT}}
          else
            echo "Kind context does not exist. It will be created if necessary."
          fi
        else
          echo "Using existing kubecontext..."
        fi
    silent: true

  kind-ensure:
    desc: |
      Ensure a Kind cluster exists, creating it if necessary.
      This task checks for the existence of a Kind cluster with the specified name and creates one if it doesn't exist.
      
      Usage:
        task kind-ensure
      
      Variables:
        KIND_CLUSTER_NAME: Name of the Kind cluster (default defined in Taskfile)
        ENVTEST_K8S_VERSION: Kubernetes version to use for the cluster
      
      Note:
        This task will set the kubectl context to the newly created or existing Kind cluster.
    cmds:
      - task: set-context
      - |
        if ! kind get clusters | grep -q '^{{.KIND_CLUSTER_NAME}}$'; then
          echo "Creating Kind cluster '{{.KIND_CLUSTER_NAME}}'..."
          kind create cluster --name {{.KIND_CLUSTER_NAME}} --image kindest/node:v{{.ENVTEST_K8S_VERSION}}
          echo "Setting kubectl context to the new Kind cluster..."
          kubectl config use-context kind-{{.KIND_CLUSTER_NAME}}
        else
          echo "Kind cluster '{{.KIND_CLUSTER_NAME}}' already exists."
          echo "Ensuring kubectl context is set to the Kind cluster..."
          kubectl config use-context kind-{{.KIND_CLUSTER_NAME}}
        fi
    silent: false

  kind-create:
    desc: Create a Kind cluster
    cmds:
      - task: set-context
      - kind create cluster --name {{.KIND_CLUSTER_NAME}} --image kindest/node:v{{.ENVTEST_K8S_VERSION}}

  kind-destroy:
    desc: Delete the Kind cluster
    cmds:
      - task: set-context
      - kind delete cluster --name {{.KIND_CLUSTER_NAME}}

  kind-start:
    desc: Start the Kind cluster
    cmds:
      - docker start {{.KIND_CONTROL_PLANE}} || true

  kind-stop:
    desc: Stop the Kind cluster
    cmds:
      - docker stop {{.KIND_CONTROL_PLANE}} || true

  kind-load-image:
    desc: Load a Docker image into the Kind cluster
    cmds:
      - task: set-context
      - |
        if ! docker image inspect {{.IMG}} &> /dev/null; then
          echo "Error: Image {{.IMG}} not found locally. Please build or pull the image first."
          exit 1
        fi
      - |
        if ! kind get clusters | grep -q '^{{.KIND_CLUSTER_NAME}}$'; then
          echo "Error: Kind cluster '{{.KIND_CLUSTER_NAME}}' not found. Please create the cluster first."
          exit 1
        fi
      - |
        echo "Loading image {{.IMG}} into Kind cluster '{{.KIND_CLUSTER_NAME}}'..."
        if kind load docker-image {{.IMG}} --name {{.KIND_CLUSTER_NAME}}; then
          echo "Image loaded successfully."
        else
          echo "Error: Failed to load image into the Kind cluster."
          exit 1
        fi
    silent: false

  kind-load-images:
    desc: Load internal and external Docker images into Kind cluster
    vars:
      INT_IMAGES_TO_LOAD: 
        sh: echo {{.IMG}}
      EXT_IMAGES_TO_LOAD: 
        - envoyproxy/envoy:v1.31-latest
        - linuxserver/code-server:latest
        - linuxserver/webtop:debian-xfce
    cmds:
      - task: set-context
      - |
        if [ "{{.USE_KIND_CONTEXT}}" = "true" ]; then
          echo "Using Kind context..."
          for img in {{.INT_IMAGES_TO_LOAD}}; do
            echo "Loading $img";
            kind load docker-image $img --name {{.KIND_CLUSTER_NAME}};
          done
          for img in {{range .EXT_IMAGES_TO_LOAD}}"{{.}}" {{end}}; do
            echo "Pulling $img";
            {{.CONTAINER_TOOL}} pull $img;
            echo "Loading $img";
            kind load docker-image $img --name {{.KIND_CLUSTER_NAME}};
          done
        else
          echo "Skipping image load for non-Kind context"
        fi

  deploy-kind:
    internal: true
    deps:
      - build:docker-build
      - build:build-installer
    cmds:
      - task: set-context
      - echo "Deploying to Kind cluster..."
      - 'kubectl apply -f {{.ROOT_DIR}}/dist/install.yaml'

  undeploy-kind:
    internal: true
    cmds:
      - echo "Undeploying from Kind cluster..."
      - task: set-context
      - '{{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND}} -f {{.ROOT_DIR}}/dist/install.yaml'

  deploy-remote:
    internal: true
    deps:
      - build:docker-build
      - build:build-installer
    cmds:
      - echo "Using remote cluster. Ensure the image is built."
      - '{{.KUBECTL}} apply -f {{.ROOT_DIR}}/dist/install.yaml'

  undeploy-remote:
    internal: true
    cmds:
      - echo "Undeploying from remote cluster..."
      - '{{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND}} -f {{.ROOT_DIR}}/dist/install.yaml'

  logs:
    cmds:
      - '{{.KUBECTL}} logs -f deployment/controller-manager -n kode-system'
